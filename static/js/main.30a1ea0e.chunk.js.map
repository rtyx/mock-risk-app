{"version":3,"sources":["components/QuestionCard/QuestionCard.tsx","API.ts","components/ResultCard/ResultCard.tsx","App.tsx","index.tsx"],"names":["QuestionCard","question","number","callback","className","text","answers","map","answer","key","value","onClick","fetchQuestions","a","fetch","json","fetchUserLevel","values","riskLevels","sum","reduce","b","fetchResults","method","body","JSON","stringify","userLevel","postUserLevel","response","status","ResultCard","riskLevel","recommended","level","title","description","App","props","useState","localStorage","getItem","canContinue","setCanContinue","showStart","setShowStart","showRestart","setShowRestart","loading","setLoading","showAllLevels","setShowAllLevels","finished","setFinished","setNumber","questions","setQuestions","userAnswers","setUserAnswers","setUserLevel","setRiskLevels","loadQuestions","loadRiskLevel","startQuiz","undefined","clearStorage","continueQuiz","storedAnswers","parse","length","clear","finish","resetFocus","e","currentTarget","blur","confirmLevel","chosenLevel","find","item","next","showFinish","showNext","showPrevious","setItem","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30a1ea0e.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { Question } from '../../types';\nimport './QuestionCard.css'\n\ninterface OwnProps {\n    question: Question;\n    number: number;\n    callback: any;\n}\n\ntype QuestionCardProps = OwnProps;\n\nconst QuestionCard: FunctionComponent<QuestionCardProps> = ({question, number, callback}) => {\n    return (\n        <div className=\"QuestionCard\">\n            <h2 className=\"number\">{number}</h2>\n            <p className=\"question\">{question.text}</p>\n            <ul className=\"answers\">\n                {question.answers.map(answer =>\n                    (\n                        <li key={answer.text}>\n                            <button className=\"pure-button\" value={answer.value}\n                                    onClick={callback}>{answer.text}</button>\n                        </li>\n                    ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default QuestionCard;\n","import { RiskLevel, RiskResult } from './types';\n\nexport const fetchQuestions = async () => {\n    const endpoint = `https://run.mocky.io/v3/ada7c70c-8d83-4560-8c16-41ede7495fd2`;\n    return await (await fetch(endpoint)).json();\n};\n\nconst fetchUserLevel = (values: number[], riskLevels: RiskLevel[]) => {\n    const sum = values.reduce((a, b) => a + b, 0);\n    let userLevel: RiskLevel;\n    if (sum > 0) {\n        userLevel = riskLevels[2];\n    } else if (sum < 0) {\n        userLevel = riskLevels[0];\n    } else {\n        userLevel = riskLevels[1];\n    }\n    return userLevel;\n};\n\nexport const fetchResults: (values: number[]) => Promise<RiskResult> = async (values: number[]) => {\n    const endpoint = `https://run.mocky.io/v3/f3a6fa1e-6eb6-4699-b4d3-7f1dbce31c58`;\n\n    const riskLevels: RiskLevel[] = await (await fetch(endpoint, {\n        method: 'POST',\n        body: JSON.stringify(values)\n    })).json();\n\n    const userLevel = fetchUserLevel(values, riskLevels); // Let's imagine this happens in the back end\n\n    return {riskLevels, userLevel}\n};\n\nexport const postUserLevel = async (userLevel: RiskLevel) => {\n    const endpoint = `https://run.mocky.io/v3/f3a6fa1e-6eb6-4699-b4d3-7f1dbce31c58`;\n\n    const response: Response = await fetch(endpoint, {\n        method: 'POST',\n        body: JSON.stringify(userLevel)\n    });\n\n    return response.status === 200;\n};\n","import React, { FunctionComponent } from 'react';\nimport { RiskLevel } from '../../types';\nimport './ResultCard.css'\n\ninterface OwnProps {\n    callback: any;\n    riskLevel: RiskLevel;\n    recommended: boolean;\n}\n\ntype Props = OwnProps;\n\nconst ResultCard: FunctionComponent<Props> = ({riskLevel, callback, recommended}) => {\n\n    return (\n        <div className={recommended ? 'ResultCard recommended' : 'ResultCard'}>\n            <h2>Level {riskLevel.level}</h2>\n            <h3>{riskLevel.title}</h3>\n            <p>{riskLevel.description}</p>\n            <button className={recommended ? 'pure-button button-success' : 'pure-button'}\n                    onClick={callback}\n                    value={riskLevel.level}>\n                Select level {riskLevel.level}\n            </button>\n            {recommended &&\n            <p>(recommended)</p>\n            }\n        </div>\n    );\n};\n\nexport default ResultCard;\n","import React, { FunctionComponent, useState } from 'react';\nimport QuestionCard from './components/QuestionCard/QuestionCard';\nimport { fetchQuestions, fetchResults, postUserLevel } from './API';\nimport { Question, RiskLevel } from './types';\nimport ResultCard from './components/ResultCard/ResultCard';\nimport './App.css';\n\ninterface OwnProps {\n}\n\ntype AppProps = OwnProps;\n\nconst App: FunctionComponent<AppProps> = (props) => {\n    const [canContinue, setCanContinue] = useState(!!localStorage.getItem('userAnswers'));\n    const [showStart, setShowStart] = useState(!canContinue);\n    const [showRestart, setShowRestart] = useState(canContinue);\n    const [loading, setLoading] = useState(false);\n    const [showAllLevels, setShowAllLevels] = useState(false);\n    const [finished, setFinished] = useState(false);\n\n    const [number, setNumber] = useState(0);\n    const [questions, setQuestions] = useState<Question[]>();\n    const [userAnswers, setUserAnswers] = useState<number[]>([]);\n    const [userLevel, setUserLevel] = useState<RiskLevel>();\n    const [riskLevels, setRiskLevels] = useState<RiskLevel[]>();\n\n    const loadQuestions = async () => {\n        if (!questions) {\n            setLoading(true);\n            setQuestions(await fetchQuestions());\n            setLoading(false);\n        }\n    };\n\n    const loadRiskLevel = async () => {\n        setLoading(true);\n        const response = await fetchResults(userAnswers);\n        setUserLevel(response.userLevel);\n        setRiskLevels(response.riskLevels);\n        setLoading(false);\n    };\n\n    const startQuiz = async () => {\n        setShowStart(false);\n        setShowRestart(false);\n        await loadQuestions();\n        setUserAnswers([]);\n        setNumber(0);\n        setUserLevel(undefined);\n        setFinished(false);\n        clearStorage();\n    };\n\n    const continueQuiz = async () => {\n        setCanContinue(false);\n        setShowRestart(false);\n        await loadQuestions();\n        const storedAnswers = JSON.parse(localStorage.getItem('userAnswers')!);\n        setUserAnswers(storedAnswers);\n        setNumber(storedAnswers.length);\n    };\n\n    const clearStorage = () => {\n        localStorage.clear();\n        setCanContinue(false);\n    };\n\n    const finish = async () => {\n        setQuestions(undefined);\n        await loadRiskLevel();\n        clearStorage();\n    };\n\n    const registerAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n        userAnswers[number] = +e.currentTarget.value;\n        setUserAnswers(userAnswers);\n        resetFocus(e);\n        localStorage.setItem('userAnswers', JSON.stringify(userAnswers));\n        showFinish ? finish() : next();\n    };\n\n    const resetFocus = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.currentTarget.blur();\n    };\n\n    const confirmLevel = async (e: React.MouseEvent<HTMLButtonElement>) => {\n        setLoading(true);\n        const chosenLevel: RiskLevel = riskLevels!.find(item => item.level === +e) as RiskLevel;\n        await postUserLevel(chosenLevel);\n        setUserLevel(chosenLevel);\n        setLoading(false);\n        setShowAllLevels(false);\n        setFinished(true);\n        setShowRestart(true);\n    };\n\n    const onShowAllLevels = () => {\n        setShowAllLevels(true);\n    };\n\n    const next = () => {\n        setNumber(number + 1)\n    };\n\n    const prev = () => {\n        setNumber(number - 1)\n    };\n\n    const showFinish = number + 1 === questions?.length;\n    const showNext = questions && questions[number + 1] && !showFinish;\n    const showPrevious = questions && questions[number - 1];\n\n    return (\n        <div className=\"App\">\n            <h1>Risk Calculator</h1>\n\n            {\n                (showStart || canContinue) &&\n                <p>\n                    In this page you will be lead through a series of questions to assess your level of risk. You can\n                    close your browser and continue at any time. To start your risk assessment, press start.\n                </p>\n            }\n\n            {\n                finished &&\n                <div className=\"thanks\">\n                    <h2>Thanks!</h2>\n                    <p>Your data has been successfully submitted.</p>\n                </div>\n            }\n\n            <div className=\"control-buttons\">\n                {showStart &&\n                <button className=\"pure-button button-success\"\n                        onClick={startQuiz}>\n                    Start\n                </button>}\n\n                {showRestart &&\n                <button className=\"pure-button\"\n                        onClick={startQuiz}>\n                    Restart\n                </button>}\n\n                {canContinue &&\n                <button className=\"pure-button button-success\"\n                        onClick={continueQuiz}>\n                    Continue\n                </button>}\n            </div>\n\n            {\n                loading && <span>Loading...</span>\n            }\n            {\n                questions &&\n                <QuestionCard question={questions[number]}\n                              number={number + 1}\n                              callback={registerAnswer}/>\n            }\n            {\n                userLevel && !showAllLevels &&\n                <div className=\"results-wrapper\">\n                    <ResultCard callback={confirmLevel}\n                                riskLevel={userLevel!}\n                                recommended={true}/>\n\n                    <button className=\"pure-button\"\n                            onClick={onShowAllLevels}>\n                        Show all levels\n                    </button>\n                </div>\n            }\n            {\n                userLevel && showAllLevels &&\n                <div className=\"results-wrapper\">\n                    {\n                        riskLevels?.map(riskLevel => {\n                            return <ResultCard\n                                key={riskLevel.level}\n                                callback={confirmLevel}\n                                riskLevel={riskLevel!}\n                                recommended={riskLevel.level === userLevel?.level}\n                            />;\n                        })\n                    }\n                </div>\n            }\n\n            <div className=\"control-buttons\">\n                {\n                    showPrevious &&\n                    <button className=\"pure-button\"\n                            onClick={prev}>\n                        Previous\n                    </button>\n                }\n                {\n                    showNext &&\n                    <button className=\"pure-button button-success\"\n                            disabled={!userAnswers[number]}\n                            onClick={next}>\n                        Next\n                    </button>\n                }\n                {\n                    showFinish &&\n                    <button className=\"pure-button button-success\"\n                            disabled={!userAnswers[number]}\n                            onClick={finish}>\n                        Finish\n                    </button>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}